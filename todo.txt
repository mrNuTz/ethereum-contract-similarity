DONE:
  CALLDATALOAD, CALLVALUE; CALLSIZE seams to be rare
  is swarm code removed from the skeletons? -> yes
  split framework and runs
  how can is split the framework and the test-runs and document the runs?
  extract abi jump table form contracts
  events? -> log
  define a few test sets
  select only code with distinct skeletons from es verified contracts and group by name + signatures
  verify that function are ordered by signatures in runtime code (deployed code) -> yes
  invalid byte-codes at the end of skeleton?
    Auxdata is the cryptographic fingerprint of the source code, used for verification.
    This is just data, and never executed by the EVM.
  add signature sim to many-solc-versions
  many-solc-versions
    why is there almost no signature overlap?
  ssdeep with spliced out 0s could perform pretty good, because functions are ordered
  add 2 more contract to many solc versions
  solc-versions optimization
  for each bytecode
    variance between groups / variance within groups
FIRST:
  all runs should have a short description
  refactor runs or just do it from know on
    compute all pairs
    distinguish groups later
    use lists not dicts?
  cluster many-solc-versions with different similarity-measures and analyse the results

  none-obvious functions should have short description
TODO:
LATER:
  similarity measures
    more byte filters
    different lzjd parameters
    ppdeep variations
      function splitting
    bzHash
  write a hello world smart contract and compile it
QUESTIONS:
  what are data sections?
  why are there multiple meta sections?
  how will this be used?
  how to split internal functions?
  deployment code vs deployed code?
  are internal functions ordered? how stable is the ordering?
  are external functions always ordered by signature?
  skeletize rstrip trailing zeros?
MAYBE:
  byteBags should be tuples
  solc versions
    abi encoding
    more contracts
NOTES:
  select encode(addr, 'hex') from account where id = 485783246;
  bindata(cdeployed) as hex
