DONE:
  CALLDATALOAD, CALLVALUE; CALLSIZE seams to be rare
  is swarm code removed from the skeletons? -> yes
  split framework and runs
  how can is split the framework and the test-runs and document the runs?
  extract abi jump table form contracts
  events? -> log
  define a few test sets
  select only code with distinct skeletons from es verified contracts and group by name + signatures
  verify that function are ordered by signatures in runtime code (deployed code) -> yes
  invalid byte-codes at the end of skeleton?
    Auxdata is the cryptographic fingerprint of the source code, used for verification.
    This is just data, and never executed by the EVM.
  add signature sim to many-solc-versions
  many-solc-versions
    why is there almost no signature overlap?
  ssdeep with spliced out 0s could perform pretty good, because functions are ordered
  add 2 more contract to many solc versions
  solc-versions optimization
  for each bytecode
    variance between groups / variance within groups
  save gml
  solc versions
    abi encoding
    more contracts
  separation measure
  test lzjd mode
  use normalized compression distance as reference
  refactor runs or just do it from know on
    compute all pairs
    distinguish groups later
    use lists not dicts
  are external functions always ordered by signature? -> yes
  compare lzjd parameters and compare to simple bz-compression-ration
  different lzjd parameters
  ppdeep variation -> jump hash
  more byte filters -> f-stat filter
  bzHash
  proxies
  check performance with different pre-processing methods
    whole code
    whole skeleton
    section one skeleton
  test wallets
  cluster wallet type
  bz use native Levenshtein
  windows setup
  windows concurrent requires if __name__ == '__main__' check
  sync repos
  windows new lines
  are internal functions ordered? how stable is the ordering? -> I think so.
  test f-stat ncd
  test og ssdeep
    ppdeep scoring is different than ssdeep
FIRST:
TODO:
  update ethutils
  describe runs
    figure out if useful
    delete or change
    describe what it does or was supposed to show
  document none-obvious functions
  Levenshtein on whole code
LATER:
  Cython language level
  numpy deprecated
  datasets
    evaluate with a subset of candidates
      see if ppdeep is better than fourbyte
      see if jumpHash is better than ppdeep
      see if there are subgroups within the groups
    wallets are different
      wallet with same typ are similar
      pick types with many skeletons
        check outliers
    cluster contracts with the same signature
      check outliers
    generate filter with wallets and check on solc-versions-testset
    compare same algo with different datasets
      are the results different?
      -> is the test set big enough
  run idea
    pick a few codes with very close source code
    general distribution of similarity scores to evaluate individually matched cases
    these should be similar -> is the score unlikely high?
    generate p values, aggregate p values of multiple comparisons
  separation
    smooth the two empirical distributions and calculate the overlap
    or take on series as the distribution and check how likely the other is
MAYBE:
  byteBags tuples instead of dicts
  write a hello world smart contract and compile it
  Q: how often is the constructor argument detection correct?
  Q: constructor arguments are a data-section?
  Q: why are there multiple meta sections?
  run force atlas and clustering () in python
  ppdeep with custom chunk trigger
    def hashChunk(chunk) -> hash
    def digest(hash) -> digest
    def nextChunk(code, pos) -> pos
      min max chunk length
      ops: JUMP JUMPI RETURN SELFDESTRUCT REVERT INVALID
      STOP = 0x00 # doesn't work with skeletons
    def hash(code) -> List[digest]
    def similarity(a: List[digest], b: List[digest]) -> float
  split by jumpi
    calculate various 1d characteristics
      complexity
      length
      ratio of zero to none-zero
      ratio of push args to instructions
    calculate sds from mean and discretize
    exact match via Levenshtein
    [(c,l,z,a),(c,l,z,a)]
    [(c,l,z,a),(c,l,z,a)]
    optimization changes ration for all blocks in the contract
      sds from mean cancels out the optimization